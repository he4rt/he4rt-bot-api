<?php

namespace Feature\Teams;

use Heart\Team\Domain\Enums\InviteAnswerEnum;
use Heart\Team\Infrastructure\Models\Invite;
use Heart\Team\Infrastructure\Models\Role;
use Heart\User\Infrastructure\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;

class HandleInviteTest extends TestCase
{
    use DatabaseTransactions;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $inviter = User::factory()->create();
        $user = User::factory()->create();
        Role::factory()->create();

        $this->invite = Invite::factory()->create([
            'invited_by' => $inviter->getKey(),
            'member_id' => $user->getKey(),
        ]);
    }

    /** @dataProvider inviteDataProvider */
    public function test_user_can_accept_invite(InviteAnswerEnum $inviteStatus): void
    {
        $route = route('teams.handle.invite', ['invitation' => $this->invite->id]);
        $payload = ['answer' => $inviteStatus->value];

        $this->postJson($route, $payload)
            ->assertStatus($inviteStatus->getCode())
            ->assertJson(['message' => $inviteStatus->getMessage()]);
    }

    public static function inviteDataProvider(): array
    {
        return [
            'user accepts the invitation' => ['inviteStatus' => InviteAnswerEnum::ACCEPT],
            'user declines the invitation' => ['inviteStatus' => InviteAnswerEnum::DECLINE],
        ];
    }
}
